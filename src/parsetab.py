
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ARRAY ASSIGN BOOLEANTYPE CHAR CHARTYPE COLON COMMA COMMENT DIVIDE EQUAL FALSE FLOAT FLOATTYPE FUNCTION GREATER GREATEREQUAL HASHTAG IF INTEGER INTTYPE LBRACKET LCURLY LESS LESSEQUAL LPAREN MINUS NAME NOT NOTEQUAL OR PERCENT PLUS RBRACKET RCURLY RPAREN SEMICOLON STRING STRINGTYPE TIMES TRUE VAL VAR VOIDTYPEprogram : function_definition\n               | array\n               | emptyarray : LBRACKET elements RBRACKETelements : element COMMA elements\n                | elementelement : INTEGER\n               | FLOAT\n               | STRING\n               | CHAR\n               | arrayfunction_definition : FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLYfunction_definition : FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLONparameters : parameter COMMA parameters\n                  | parameterparameter : varval NAME COLON typevarval : VAR\n              | VALtype : INTTYPE\n            | STRINGTYPE\n            | FLOATTYPE\n            | CHARTYPE\n            | BOOLEANTYPE\n            | VOIDTYPE\n            | LBRACKET type RBRACKETbody : statement body\n            | emptystatement : INTTYPEempty :'
    
_lr_action_items = {'FUNCTION':([0,],[5,]),'LBRACKET':([0,6,17,27,29,37,],[6,6,6,37,37,37,]),'$end':([0,1,2,3,4,16,40,47,],[-29,0,-1,-2,-3,-4,-13,-12,]),'NAME':([5,20,21,22,],[7,26,-17,-18,]),'INTEGER':([6,17,],[10,10,]),'FLOAT':([6,17,],[11,11,]),'STRING':([6,17,],[12,12,]),'CHAR':([6,17,],[13,13,]),'LPAREN':([7,],[15,]),'RBRACKET':([8,9,10,11,12,13,14,16,23,31,32,33,34,35,36,41,46,],[16,-6,-7,-8,-9,-10,-11,-4,-5,-19,-20,-21,-22,-23,-24,46,-25,]),'COMMA':([9,10,11,12,13,14,16,19,31,32,33,34,35,36,38,46,],[17,-7,-8,-9,-10,-11,-4,25,-19,-20,-21,-22,-23,-24,-16,-25,]),'VAR':([15,25,],[21,21,]),'VAL':([15,25,],[22,22,]),'RPAREN':([18,19,28,31,32,33,34,35,36,38,46,],[24,-15,-14,-19,-20,-21,-22,-23,-24,-16,-25,]),'COLON':([24,26,],[27,29,]),'INTTYPE':([27,29,37,39,43,45,],[31,31,31,45,45,-28,]),'STRINGTYPE':([27,29,37,],[32,32,32,]),'FLOATTYPE':([27,29,37,],[33,33,33,]),'CHARTYPE':([27,29,37,],[34,34,34,]),'BOOLEANTYPE':([27,29,37,],[35,35,35,]),'VOIDTYPE':([27,29,37,],[36,36,36,]),'LCURLY':([30,31,32,33,34,35,36,46,],[39,-19,-20,-21,-22,-23,-24,-25,]),'SEMICOLON':([30,31,32,33,34,35,36,46,],[40,-19,-20,-21,-22,-23,-24,-25,]),'RCURLY':([39,42,43,44,45,48,],[-29,47,-29,-27,-28,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_definition':([0,],[2,]),'array':([0,6,17,],[3,14,14,]),'empty':([0,39,43,],[4,44,44,]),'elements':([6,17,],[8,23,]),'element':([6,17,],[9,9,]),'parameters':([15,25,],[18,28,]),'parameter':([15,25,],[19,19,]),'varval':([15,25,],[20,20,]),'type':([27,29,37,],[30,38,41,]),'body':([39,43,],[42,48,]),'statement':([39,43,],[43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_definition','program',1,'p_program','parser.py',71),
  ('program -> array','program',1,'p_program','parser.py',72),
  ('program -> empty','program',1,'p_program','parser.py',73),
  ('array -> LBRACKET elements RBRACKET','array',3,'p_array','parser.py',86),
  ('elements -> element COMMA elements','elements',3,'p_elements','parser.py',90),
  ('elements -> element','elements',1,'p_elements','parser.py',91),
  ('element -> INTEGER','element',1,'p_element','parser.py',98),
  ('element -> FLOAT','element',1,'p_element','parser.py',99),
  ('element -> STRING','element',1,'p_element','parser.py',100),
  ('element -> CHAR','element',1,'p_element','parser.py',101),
  ('element -> array','element',1,'p_element','parser.py',102),
  ('function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY','function_definition',10,'p_function_definition','parser.py',124),
  ('function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLON','function_definition',8,'p_function_declaration','parser.py',129),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','parser.py',134),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',135),
  ('parameter -> varval NAME COLON type','parameter',4,'p_parameter','parser.py',143),
  ('varval -> VAR','varval',1,'p_varval','parser.py',151),
  ('varval -> VAL','varval',1,'p_varval','parser.py',152),
  ('type -> INTTYPE','type',1,'p_type','parser.py',156),
  ('type -> STRINGTYPE','type',1,'p_type','parser.py',157),
  ('type -> FLOATTYPE','type',1,'p_type','parser.py',158),
  ('type -> CHARTYPE','type',1,'p_type','parser.py',159),
  ('type -> BOOLEANTYPE','type',1,'p_type','parser.py',160),
  ('type -> VOIDTYPE','type',1,'p_type','parser.py',161),
  ('type -> LBRACKET type RBRACKET','type',3,'p_type','parser.py',162),
  ('body -> statement body','body',2,'p_body','parser.py',169),
  ('body -> empty','body',1,'p_body','parser.py',170),
  ('statement -> INTTYPE','statement',1,'p_statement','parser.py',174),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',178),
]
