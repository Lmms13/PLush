Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARRAY
    ASSIGN
    COMMENT
    DIVIDE
    EQUAL
    FALSE
    GREATER
    GREATEREQUAL
    HASHTAG
    IF
    LESS
    LESSEQUAL
    MINUS
    NOT
    NOTEQUAL
    OR
    PERCENT
    PLUS
    TIMES
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> function_definition
Rule 2     program -> array
Rule 3     program -> empty
Rule 4     array -> LBRACKET elements RBRACKET
Rule 5     elements -> element COMMA elements
Rule 6     elements -> element
Rule 7     element -> INTEGER
Rule 8     element -> FLOAT
Rule 9     element -> STRING
Rule 10    element -> CHAR
Rule 11    element -> array
Rule 12    function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY
Rule 13    function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLON
Rule 14    parameters -> parameter COMMA parameters
Rule 15    parameters -> parameter
Rule 16    parameter -> varval NAME COLON type
Rule 17    varval -> VAR
Rule 18    varval -> VAL
Rule 19    type -> INTTYPE
Rule 20    type -> STRINGTYPE
Rule 21    type -> FLOATTYPE
Rule 22    type -> CHARTYPE
Rule 23    type -> BOOLEANTYPE
Rule 24    type -> VOIDTYPE
Rule 25    type -> LBRACKET type RBRACKET
Rule 26    body -> statement body
Rule 27    body -> empty
Rule 28    statement -> INTTYPE
Rule 29    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
ASSIGN               : 
BOOLEANTYPE          : 23
CHAR                 : 10
CHARTYPE             : 22
COLON                : 12 13 16
COMMA                : 5 14
COMMENT              : 
DIVIDE               : 
EQUAL                : 
FALSE                : 
FLOAT                : 8
FLOATTYPE            : 21
FUNCTION             : 12 13
GREATER              : 
GREATEREQUAL         : 
HASHTAG              : 
IF                   : 
INTEGER              : 7
INTTYPE              : 19 28
LBRACKET             : 4 25
LCURLY               : 12
LESS                 : 
LESSEQUAL            : 
LPAREN               : 12 13
MINUS                : 
NAME                 : 12 13 16
NOT                  : 
NOTEQUAL             : 
OR                   : 
PERCENT              : 
PLUS                 : 
RBRACKET             : 4 25
RCURLY               : 12
RPAREN               : 12 13
SEMICOLON            : 13
STRING               : 9
STRINGTYPE           : 20
TIMES                : 
TRUE                 : 
VAL                  : 18
VAR                  : 17
VOIDTYPE             : 24
error                : 

Nonterminals, with rules where they appear

array                : 2 11
body                 : 12 26
element              : 5 6
elements             : 4 5
empty                : 3 27
function_definition  : 1
parameter            : 14 15
parameters           : 12 13 14
program              : 0
statement            : 26
type                 : 12 13 16 25
varval               : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_definition
    (2) program -> . array
    (3) program -> . empty
    (12) function_definition -> . FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY
    (13) function_definition -> . FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLON
    (4) array -> . LBRACKET elements RBRACKET
    (29) empty -> .

    FUNCTION        shift and go to state 5
    LBRACKET        shift and go to state 6
    $end            reduce using rule 29 (empty -> .)

    program                        shift and go to state 1
    function_definition            shift and go to state 2
    array                          shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> function_definition .

    $end            reduce using rule 1 (program -> function_definition .)


state 3

    (2) program -> array .

    $end            reduce using rule 2 (program -> array .)


state 4

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 5

    (12) function_definition -> FUNCTION . NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY
    (13) function_definition -> FUNCTION . NAME LPAREN parameters RPAREN COLON type SEMICOLON

    NAME            shift and go to state 7


state 6

    (4) array -> LBRACKET . elements RBRACKET
    (5) elements -> . element COMMA elements
    (6) elements -> . element
    (7) element -> . INTEGER
    (8) element -> . FLOAT
    (9) element -> . STRING
    (10) element -> . CHAR
    (11) element -> . array
    (4) array -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 10
    FLOAT           shift and go to state 11
    STRING          shift and go to state 12
    CHAR            shift and go to state 13
    LBRACKET        shift and go to state 6

    elements                       shift and go to state 8
    element                        shift and go to state 9
    array                          shift and go to state 14

state 7

    (12) function_definition -> FUNCTION NAME . LPAREN parameters RPAREN COLON type LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME . LPAREN parameters RPAREN COLON type SEMICOLON

    LPAREN          shift and go to state 15


state 8

    (4) array -> LBRACKET elements . RBRACKET

    RBRACKET        shift and go to state 16


state 9

    (5) elements -> element . COMMA elements
    (6) elements -> element .

    COMMA           shift and go to state 17
    RBRACKET        reduce using rule 6 (elements -> element .)


state 10

    (7) element -> INTEGER .

    COMMA           reduce using rule 7 (element -> INTEGER .)
    RBRACKET        reduce using rule 7 (element -> INTEGER .)


state 11

    (8) element -> FLOAT .

    COMMA           reduce using rule 8 (element -> FLOAT .)
    RBRACKET        reduce using rule 8 (element -> FLOAT .)


state 12

    (9) element -> STRING .

    COMMA           reduce using rule 9 (element -> STRING .)
    RBRACKET        reduce using rule 9 (element -> STRING .)


state 13

    (10) element -> CHAR .

    COMMA           reduce using rule 10 (element -> CHAR .)
    RBRACKET        reduce using rule 10 (element -> CHAR .)


state 14

    (11) element -> array .

    COMMA           reduce using rule 11 (element -> array .)
    RBRACKET        reduce using rule 11 (element -> array .)


state 15

    (12) function_definition -> FUNCTION NAME LPAREN . parameters RPAREN COLON type LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME LPAREN . parameters RPAREN COLON type SEMICOLON
    (14) parameters -> . parameter COMMA parameters
    (15) parameters -> . parameter
    (16) parameter -> . varval NAME COLON type
    (17) varval -> . VAR
    (18) varval -> . VAL

    VAR             shift and go to state 21
    VAL             shift and go to state 22

    parameters                     shift and go to state 18
    parameter                      shift and go to state 19
    varval                         shift and go to state 20

state 16

    (4) array -> LBRACKET elements RBRACKET .

    $end            reduce using rule 4 (array -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 4 (array -> LBRACKET elements RBRACKET .)
    RBRACKET        reduce using rule 4 (array -> LBRACKET elements RBRACKET .)


state 17

    (5) elements -> element COMMA . elements
    (5) elements -> . element COMMA elements
    (6) elements -> . element
    (7) element -> . INTEGER
    (8) element -> . FLOAT
    (9) element -> . STRING
    (10) element -> . CHAR
    (11) element -> . array
    (4) array -> . LBRACKET elements RBRACKET

    INTEGER         shift and go to state 10
    FLOAT           shift and go to state 11
    STRING          shift and go to state 12
    CHAR            shift and go to state 13
    LBRACKET        shift and go to state 6

    element                        shift and go to state 9
    elements                       shift and go to state 23
    array                          shift and go to state 14

state 18

    (12) function_definition -> FUNCTION NAME LPAREN parameters . RPAREN COLON type LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME LPAREN parameters . RPAREN COLON type SEMICOLON

    RPAREN          shift and go to state 24


state 19

    (14) parameters -> parameter . COMMA parameters
    (15) parameters -> parameter .

    COMMA           shift and go to state 25
    RPAREN          reduce using rule 15 (parameters -> parameter .)


state 20

    (16) parameter -> varval . NAME COLON type

    NAME            shift and go to state 26


state 21

    (17) varval -> VAR .

    NAME            reduce using rule 17 (varval -> VAR .)


state 22

    (18) varval -> VAL .

    NAME            reduce using rule 18 (varval -> VAL .)


state 23

    (5) elements -> element COMMA elements .

    RBRACKET        reduce using rule 5 (elements -> element COMMA elements .)


state 24

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN . COLON type LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME LPAREN parameters RPAREN . COLON type SEMICOLON

    COLON           shift and go to state 27


state 25

    (14) parameters -> parameter COMMA . parameters
    (14) parameters -> . parameter COMMA parameters
    (15) parameters -> . parameter
    (16) parameter -> . varval NAME COLON type
    (17) varval -> . VAR
    (18) varval -> . VAL

    VAR             shift and go to state 21
    VAL             shift and go to state 22

    parameter                      shift and go to state 19
    parameters                     shift and go to state 28
    varval                         shift and go to state 20

state 26

    (16) parameter -> varval NAME . COLON type

    COLON           shift and go to state 29


state 27

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON . type LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON . type SEMICOLON
    (19) type -> . INTTYPE
    (20) type -> . STRINGTYPE
    (21) type -> . FLOATTYPE
    (22) type -> . CHARTYPE
    (23) type -> . BOOLEANTYPE
    (24) type -> . VOIDTYPE
    (25) type -> . LBRACKET type RBRACKET

    INTTYPE         shift and go to state 31
    STRINGTYPE      shift and go to state 32
    FLOATTYPE       shift and go to state 33
    CHARTYPE        shift and go to state 34
    BOOLEANTYPE     shift and go to state 35
    VOIDTYPE        shift and go to state 36
    LBRACKET        shift and go to state 37

    type                           shift and go to state 30

state 28

    (14) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 14 (parameters -> parameter COMMA parameters .)


state 29

    (16) parameter -> varval NAME COLON . type
    (19) type -> . INTTYPE
    (20) type -> . STRINGTYPE
    (21) type -> . FLOATTYPE
    (22) type -> . CHARTYPE
    (23) type -> . BOOLEANTYPE
    (24) type -> . VOIDTYPE
    (25) type -> . LBRACKET type RBRACKET

    INTTYPE         shift and go to state 31
    STRINGTYPE      shift and go to state 32
    FLOATTYPE       shift and go to state 33
    CHARTYPE        shift and go to state 34
    BOOLEANTYPE     shift and go to state 35
    VOIDTYPE        shift and go to state 36
    LBRACKET        shift and go to state 37

    type                           shift and go to state 38

state 30

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type . LCURLY body RCURLY
    (13) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type . SEMICOLON

    LCURLY          shift and go to state 39
    SEMICOLON       shift and go to state 40


state 31

    (19) type -> INTTYPE .

    LCURLY          reduce using rule 19 (type -> INTTYPE .)
    SEMICOLON       reduce using rule 19 (type -> INTTYPE .)
    COMMA           reduce using rule 19 (type -> INTTYPE .)
    RPAREN          reduce using rule 19 (type -> INTTYPE .)
    RBRACKET        reduce using rule 19 (type -> INTTYPE .)


state 32

    (20) type -> STRINGTYPE .

    LCURLY          reduce using rule 20 (type -> STRINGTYPE .)
    SEMICOLON       reduce using rule 20 (type -> STRINGTYPE .)
    COMMA           reduce using rule 20 (type -> STRINGTYPE .)
    RPAREN          reduce using rule 20 (type -> STRINGTYPE .)
    RBRACKET        reduce using rule 20 (type -> STRINGTYPE .)


state 33

    (21) type -> FLOATTYPE .

    LCURLY          reduce using rule 21 (type -> FLOATTYPE .)
    SEMICOLON       reduce using rule 21 (type -> FLOATTYPE .)
    COMMA           reduce using rule 21 (type -> FLOATTYPE .)
    RPAREN          reduce using rule 21 (type -> FLOATTYPE .)
    RBRACKET        reduce using rule 21 (type -> FLOATTYPE .)


state 34

    (22) type -> CHARTYPE .

    LCURLY          reduce using rule 22 (type -> CHARTYPE .)
    SEMICOLON       reduce using rule 22 (type -> CHARTYPE .)
    COMMA           reduce using rule 22 (type -> CHARTYPE .)
    RPAREN          reduce using rule 22 (type -> CHARTYPE .)
    RBRACKET        reduce using rule 22 (type -> CHARTYPE .)


state 35

    (23) type -> BOOLEANTYPE .

    LCURLY          reduce using rule 23 (type -> BOOLEANTYPE .)
    SEMICOLON       reduce using rule 23 (type -> BOOLEANTYPE .)
    COMMA           reduce using rule 23 (type -> BOOLEANTYPE .)
    RPAREN          reduce using rule 23 (type -> BOOLEANTYPE .)
    RBRACKET        reduce using rule 23 (type -> BOOLEANTYPE .)


state 36

    (24) type -> VOIDTYPE .

    LCURLY          reduce using rule 24 (type -> VOIDTYPE .)
    SEMICOLON       reduce using rule 24 (type -> VOIDTYPE .)
    COMMA           reduce using rule 24 (type -> VOIDTYPE .)
    RPAREN          reduce using rule 24 (type -> VOIDTYPE .)
    RBRACKET        reduce using rule 24 (type -> VOIDTYPE .)


state 37

    (25) type -> LBRACKET . type RBRACKET
    (19) type -> . INTTYPE
    (20) type -> . STRINGTYPE
    (21) type -> . FLOATTYPE
    (22) type -> . CHARTYPE
    (23) type -> . BOOLEANTYPE
    (24) type -> . VOIDTYPE
    (25) type -> . LBRACKET type RBRACKET

    INTTYPE         shift and go to state 31
    STRINGTYPE      shift and go to state 32
    FLOATTYPE       shift and go to state 33
    CHARTYPE        shift and go to state 34
    BOOLEANTYPE     shift and go to state 35
    VOIDTYPE        shift and go to state 36
    LBRACKET        shift and go to state 37

    type                           shift and go to state 41

state 38

    (16) parameter -> varval NAME COLON type .

    COMMA           reduce using rule 16 (parameter -> varval NAME COLON type .)
    RPAREN          reduce using rule 16 (parameter -> varval NAME COLON type .)


state 39

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY . body RCURLY
    (26) body -> . statement body
    (27) body -> . empty
    (28) statement -> . INTTYPE
    (29) empty -> .

    INTTYPE         shift and go to state 45
    RCURLY          reduce using rule 29 (empty -> .)

    body                           shift and go to state 42
    statement                      shift and go to state 43
    empty                          shift and go to state 44

state 40

    (13) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLON .

    $end            reduce using rule 13 (function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type SEMICOLON .)


state 41

    (25) type -> LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 46


state 42

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body . RCURLY

    RCURLY          shift and go to state 47


state 43

    (26) body -> statement . body
    (26) body -> . statement body
    (27) body -> . empty
    (28) statement -> . INTTYPE
    (29) empty -> .

    INTTYPE         shift and go to state 45
    RCURLY          reduce using rule 29 (empty -> .)

    statement                      shift and go to state 43
    body                           shift and go to state 48
    empty                          shift and go to state 44

state 44

    (27) body -> empty .

    RCURLY          reduce using rule 27 (body -> empty .)


state 45

    (28) statement -> INTTYPE .

    INTTYPE         reduce using rule 28 (statement -> INTTYPE .)
    RCURLY          reduce using rule 28 (statement -> INTTYPE .)


state 46

    (25) type -> LBRACKET type RBRACKET .

    LCURLY          reduce using rule 25 (type -> LBRACKET type RBRACKET .)
    SEMICOLON       reduce using rule 25 (type -> LBRACKET type RBRACKET .)
    COMMA           reduce using rule 25 (type -> LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 25 (type -> LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 25 (type -> LBRACKET type RBRACKET .)


state 47

    (12) function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY .

    $end            reduce using rule 12 (function_definition -> FUNCTION NAME LPAREN parameters RPAREN COLON type LCURLY body RCURLY .)


state 48

    (26) body -> statement body .

    RCURLY          reduce using rule 26 (body -> statement body .)

